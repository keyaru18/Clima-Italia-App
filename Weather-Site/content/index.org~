#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil expand-links:t f:t
#+options: inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: Proyecto ICCD332 Arquitectura de Computadores
#+date: 2024-08-07
#+author: Integrantes: Lenin Amangandi,Richard Tipantiza 
#+email: lenin.amangandi@epn.edu.ec,richard.tipantiza@epn.edu.ec
#+language: es
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.1 (Org mode 9.7.5)
#+cite_export:
* City Weather APP
Este es el proyecto de fin de semestre en donde se pretende demostrar
las destrezas obtenidas durante el transcurso de la asignatura de
**Arquitectura de Computadores**.

1. Conocimientos de sistema operativo Linux
2. Conocimientos de Emacs/Jupyter
3. Configuración de Entorno para Data Science con Mamba/Anaconda
4. Literate Programming
 
** Estructura del proyecto
Se recomienda que el proyecto se cree en el /home/ del sistema
operativo i.e. /home/<user>/. Allí se creará la carpeta /CityWeather/
#+begin_src shell :results output :exports both
  mkdir ItalianWeather
  cd ItalianWeather
  mkdir Weather-Site
  cd Weather-Site
  mkdir content
  mkdir public
  cd public
  pwd
#+end_src

#+RESULTS:
: /home/lenin27amangandi/ItalianWeather/Weather-Site/public

El proyecto ha de tener los siguientes archivos y
subdirectorios. Adaptar los nombres de los archivos según las ciudades
específicas del grupo.

#+begin_src shell :results output :exports results
cd ..
cd ..
tree
#+end_src

#+RESULTS:
#+begin_example
.
├── Weather-Site
│   ├── build-site.el
│   ├── build-site.el:Zone.Identifier
│   ├── build-site.el:Zone.Identifier:Zone.Identifier
│   ├── build-site.el~
│   ├── build-site.el~:Zone.Identifier
│   ├── build.sh
│   ├── build.sh:Zone.Identifier
│   ├── build.sh:Zone.Identifier:Zone.Identifier
│   ├── build.sh~
│   ├── build.sh~:Zone.Identifier
│   ├── content
│   │   ├── images
│   │   ├── index.org
│   │   ├── index.org:Zone.Identifier
│   │   ├── index.org~
│   │   └── index.org~:Zone.Identifier
│   └── public
│       ├── images
│       ├── index.html
│       └── index.html:Zone.Identifier
├── clima-italia-hoy.csv
├── clima-italia-hoy.csv:Zone.Identifier
├── get-weather.sh
├── get-weather.sh:Zone.Identifier
├── get-weather.sh:Zone.Identifier:Zone.Identifier
├── get-weather.sh~
├── get-weather.sh~:Zone.Identifier
├── main.py
├── main.py:Zone.Identifier
├── output.log
└── output.log:Zone.Identifier

6 directories, 27 files
#+end_example

Puede usar Emacs para la creación de la estructura de su proyecto
usando comandos desde el bloque de shell. Recuerde ejecutar el bloque
con ~C-c C-c~. Para insertar un bloque nuevo utilice ~C-c C-,~ o ~M-x
org-insert-structure-template~. Seleccione la opción /s/ para src y
adapte el bloque según su código tenga un comandos de shell, código de
Python o de Java. En este documento ~.org~ dispone de varios ejemplos
funcionales para escribir y presentar el código.

#+begin_src shell :results output :exports both
echo 'Aquí va sus comandos'
#+end_src

#+RESULTS:
: Aquí va sus comandos

** Formulación del Problema
Se desea realizar un registro climatológico de una ciudad
$\mathcal{C}$. Para esto, escriba un script de Python/Java que permita
obtener datos climatológicos desde el API de [[https://openweathermap.org/current#one][openweathermap]]. El API
hace uso de los valores de latitud $x$ y longitud $y$ de la ciudad
$\mathcal{C}$ para devolver los valores actuales a un tiempo $t$.

Los resultados obtenidos de la consulta al API se escriben en un
archivo /clima-<ciudad>-hoy.csv/. Cada ejecución del script debe
almacenar nuevos datos en el archivo. Utilice *crontab* y sus
conocimientos de Linux y Programación para obtener datos del API de
/openweathermap/ con una periodicidad de 15 minutos mediante la
ejecución de un archivo ejecutable denominado
/get-weather.sh/. Obtenga al menos 50 datos. Verifique los
resultados. Todas las operaciones se realizan en Linux o en el
WSL. Las etapas del problema se subdividen en:

    1. Conformar los grupos de 2 estudiantes y definir la ciudad
       objeto de estudio.
    2.  Crear su API gratuito en [[https://openweathermap.org/current#one][openweathermap]]
    3. Escribir un script en Python/Java que realice la consulta al
       API y escriba los resultados en /clima-<ciudad>-hoy.csv/. El
       archivo ha de contener toda la información que se obtiene del
       API en columnas. Se debe observar que los datos sobre lluvia
       (rain) y nieve (snow) se dan a veces si existe el fenómeno.
    3. Desarrollar un ejecutable /get-weather.sh/ para ejecutar el
       programa Python/Java.[fn:1]
       #+begin_src shell :exports both
         
       #+end_src
    4. Configurar Crontab para la adquisición de datos. Escriba el
       comando configurado. Respalde la ejecución de crontab en un
       archivo output.log
    5. Realizar la presentación del Trabajo utilizando la generación
       del sitio web por medio de Emacs. Para esto es necesario crear
       la carpeta **weather-site** dentro del proyecto. Puede ajustar el
       /look and feel/ según sus preferencias. El servidor a usar es
       el **simple-httpd** integrado en Emacs que debe ser instalado:
       - Usando comandos Emacs: ~M-x package-install~ presionamos
         enter (i.e. RET) y escribimos el nombre del paquete:
         simple-httpd
       - Configurando el archivo init.el

       #+begin_src elisp
         (use-package simple-httpd
            :ensure t)
       #+end_src

       Instrucciones de sobre la creación del sitio web se tiene en el
       vídeo de instrucciones y en el archivo [[https://github.com/LeninGF/EPN-Lectures/blob/main/iccd332ArqComp-2024-A/Tutoriales/Org-Website/Org-Website.org][Org-Website.org]] en el
       GitHub del curso

    6. Su código debe estar respaldado en GitHub/BitBucket, la
       dirección será remitida en la contestación de la tarea
** Descripción del código
En esta sección se debe detallar segmentos importantes del código
desarrollado así como la **estrategia de solución** adoptada por el
grupo para resolver el problema. Divida su código en unidades
funcionales para facilitar su presentación y exposición.

Lectura del API


#+caption: Inicializar variables para el API
#+begin_src python :session :results output exports both
import requests
import csv
import os
from datetime import datetime

ARCHIVO_CSV = 'clima-italia-hoy.csv'

# Coordenadas de Italianweather
LATITUD = 42.8333
LONGITUD = 12.8333

API_KEY = 'c6042a031a2ae520ed01eeeb7116bc32'

# URL de la API
URL = f'http://api.openweathermap.org/data/3.0/weather?lat={LATITUD}&lon={LONGITUD}&appid={API_KEY}&units=metric'
#+end_src

#+RESULTS:


#+caption: Guardar datos en el Archivo CSV

#+begin_src python :session :results output exports both
import os
import csv 
def escribir_csv(datos):
    archivo_existe = os.path.isfile(ARCHIVO_CSV)
    
    with open(ARCHIVO_CSV, mode='a', newline='') as archivo:
        escritor = csv.DictWriter(archivo, fieldnames=datos.keys())
        
        if not archivo_existe:
            escritor.writeheader()
        
        escritor.writerow(datos)
#+end_src


#+caption: Funcion Principal
#+begin_src python :session :results output exports both
def main():
    datos_climaticos = obtener_datos_climaticos()
    escribir_csv(datos_climaticos)

if __name__ == '__main__':
    main()
#+end_src


** Script ejecutable sh
Se coloca el contenido del script ejecutable. Recuerde que se debe
utilizar el entorno de **anaconda/mamba** denominado **iccd332** para
la ejecución de Python; independientemente de que tenga una
instalación nativa de Python

#+caption:En el caso de los shell script se puede usar `which sh` para conocer la ubicación del ejecutable
#+begin_src shell :results output :exports both
which sh
#+end_src

#+RESULTS:
: /usr/bin/sh

#+caption: De igual manera se requiere localizar el entorno de mamba *xander* que será utilizado

#+begin_src shell :results output :exports both
which mamba
#+end_src

#+RESULTS:
: /home/iccd332/miniforge3/condabin/mamba

#+caption: Con esto el archivo ejecutable a de tener (adapte el código según las
condiciones de su máquina):

#+begin_src shell :results output :exports both
#!/usr/bin/sh
source /home/iccd332/miniforge3/etc/profile.d/conda.sh
eval "$(conda shell.bash hook)"
conda activate iccd332
#python main.py
#+end_src

#+RESULTS:


#+caption: Finalmente convierta en ejecutable como se explicó en clases y laboratorio
#+begin_src shell :results output :exports both
#!/usr/bin/sh
nano get-weather.sh
#Permisos de Ejecutable
chmod +x get-weather.sh
#+end_src

** Configuración de Crontab
Se indica la configuración realizada en crontab para la adquisición de datos

#+begin_src shell
*/45 * * * * cd Italianweather && ./get-weather.sh >> output.log 2>&1
#+end_src

- Recuerde remplazar <City> por el nombre de la ciudad que analice
- Recuerde ajustar el tiempo para potenciar tomar datos nuevos
- Recuerde que ~2>&1~ permite guardar en ~output.log~ tanto la salida
  del programa como los errores en la ejecución.
* Presentación de resultados

Para la pressentación de resultados se utilizan las librerías de Python:
- matplotlib
- pandas

Alternativamente como pudo estudiar en el Jupyter Notebook
[[https://github.com/LeninGF/EPN-Lectures/blob/main/iccd332ArqComp-2024-A/Proyectos/CityWeather/CityTemperatureAnalysis.ipynb][CityTemperatureAnalysis.ipynb]], existen librerías alternativas que se
pueden utilizar para presentar los resultados gráficos. En ambos
casos, para que funcione los siguientes bloques de código, es
necesario que realice la instalación de los paquetes usando ~mamba
install <nombre-paquete>~

** Muestra Aleatoria de datos
Presentar una muestra de 10 valores aleatorios de los datos obtenidos.


#+caption: Lectura de archivo csv

#+begin_src python :session :results output exports both
import os
import pandas as pd

file_path = "/home/iccd332/ItalianWeather/clima-italia-hoy.csv"

if os.path.exists(file_path):
    df = pd.read_csv(file_path)
    print(df.shape)
else:
    print("Error: El archivo no existe o la ruta es incorrecta.")
#+end_src

#+RESULTS:
: (42, 8)



#+caption: Despliegue de datos aleatorios
#+begin_src python :session :exports both :results value table :return table
table1 = df.sample(10)
table = [list(table1)]+[None]+table1.values.tolist()
#+end_src

#+RESULTS:
| fecha_hora          | temperatura | humedad | presion | clima  | estado_clima  | ciudad | pais |
|---------------------+-------------+---------+---------+--------+---------------+--------+------|
| 2025-02-08 00:35:03 |        3.29 |      74 |    1027 | Clouds | broken clouds | Italy  | IT   |
| 2025-02-08 00:40:02 |        3.29 |      74 |    1027 | Clouds | broken clouds | Italy  | IT   |
| 2025-02-07 22:53:03 |        3.29 |      74 |    1028 | Clouds | broken clouds | Italy  | IT   |
| 2025-02-07 22:56:04 |        3.29 |      74 |    1028 | Clouds | broken clouds | Italy  | IT   |
| 2025-02-07 22:57:03 |        3.29 |      74 |    1028 | Clouds | broken clouds | Italy  | IT   |
| 2025-02-07 23:10:03 |        3.29 |      74 |    1028 | Clouds | broken clouds | Italy  | IT   |
| 2025-02-08 00:15:03 |        3.85 |      74 |    1027 | Clouds | broken clouds | Italy  | IT   |
| 2025-02-08 00:20:03 |        3.85 |      74 |    1027 | Clouds | broken clouds | Italy  | IT   |
| 2025-02-07 22:54:03 |        3.29 |      74 |    1028 | Clouds | broken clouds | Italy  | IT   |
| 2025-02-07 23:20:03 |        2.73 |      74 |    1028 | Clouds | broken clouds | Italy  | IT   |


#+begin_src  python :results output
import pandas as pd

# Cargar el archivo CSV en un DataFrame
df = pd.read_csv('/home/iccd332/ItalianWeather/clima-italia-hoy.csv')

# Mostrar la estructura del DataFrame (número de filas y columnas)
print(df.shape)
# Mostrar las primeras filas del DataFrame para verificar los datos
print(df.head())
# Convertir la columna datetime a formato datetime y establecerla como índice
df['fecha_hora'] = pd.to_datetime(df['fecha_hora'])
df.set_index('fecha_hora', inplace=True)

# Calcular la temperatura promedio
temp_promedio = df['temperatura'].mean()
print(f"Temperatura promedio: {temp_promedio} K")


#+end_src

#+RESULTS:
#+begin_example
(42, 8)
            fecha_hora  temperatura  humedad  ...   estado_clima ciudad pais
0  2025-02-07 22:45:04         3.29       74  ...  broken clouds  Italy   IT
1  2025-02-07 22:46:03         3.29       74  ...  broken clouds  Italy   IT
2  2025-02-07 22:47:03         3.29       74  ...  broken clouds  Italy   IT
3  2025-02-07 22:47:04         3.29       74  ...  broken clouds  Italy   IT
4  2025-02-07 22:47:09         3.29       74  ...  broken clouds  Italy   IT

[5 rows x 8 columns]
Temperatura promedio: 3.276666666666667 K
#+end_example



** Gráfica Temperatura vs Tiempo
Realizar una gráfica de la Temperatura en el tiempo.


El siguiente cógido permite hacer la gráfica de la temperatura vs
tiempo para Org 9.7+. Para saber que versión dispone puede ejecutar
~M-x org-version~


#+begin_src python :results file :exports both :session
import os
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Asegurarse de que el directorio ./images exista
if not os.path.exists('./images'):
    os.makedirs('./images')

# Cargar el archivo CSV en un DataFrame
file_path = '/home/iccd332/ItalianWeather/clima-italia-hoy.csv'
df = pd.read_csv(file_path)

# Convertir la columna 'fecha_hora' a tipo datetime y establecerla como índice
df['fecha_hora'] = pd.to_datetime(df['fecha_hora'])
df.set_index('fecha_hora', inplace=True)

# Crear la gráfica
fig = plt.figure(figsize=(10, 6))
plt.plot(df.index, df['temperatura'])  # Dibuja temperatura vs tiempo

# Ajustes para la fecha en el eje X
plt.gca().xaxis.set_major_locator(mdates.HourLocator(interval=2))  # Cada 2 horas
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d %H:%M'))  # Formato de fecha
plt.xticks(rotation=40)  # Rotar etiquetas para mejorar la legibilidad

# Añadir título y etiquetas
plt.title(f"Temperatura vs Tiempo en {df['ciudad'].iloc[0]}")
plt.xlabel('Fecha y Hora')
plt.ylabel('Temperatura (K)')

# Añadir una cuadrícula para facilitar la lectura
plt.grid(True)

# Ajustar el layout para evitar que se corten las etiquetas
fig.tight_layout()

# Guardar la imagen
#fname = './images/temperature.png'
#plt.savefig(fname)

# Mostrar la gráfica
#plt.show()

# Confirmar que se ha guardado la imagen
print(f"Gráfica guardada en: {fname}")
#+end_src

#+RESULTS:
[[file:]]





Debido a que el archivo index.org se abre dentro de la carpeta
/content/, y en cambio el servidor http de emacs se ejecuta desde la
carpeta /public/ es necesario copiar el archivo a la ubicación
equivalente en ~/public/images~

#+begin_src shell
cp -rfv ./images/* /home/leningfe/PythonProjects/QuitoWeather/weather-site/public/images
#+end_src

#+RESULTS:
| './images/plot.png'        | -> | '/home/leningfe/PythonProjects/QuitoWeather/weather-site/public/images/plot.png'        |
| './images/temperature.png' | -> | '/home/leningfe/PythonProjects/QuitoWeather/weather-site/public/images/temperature.png' |

**  Realice una gráfica de Humedad con respecto al tiempo
**  *Opcional* Presente alguna gráfica de interés.

* Referencias
- [[https://emacs.stackexchange.com/questions/28715/get-pandas-data-frame-as-a-table-in-org-babel][presentar dataframe como tabla en emacs org]]
- [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html][Python Source Code Blocks in Org Mode]]
- [[https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/][Systems Crafters Construir tu sitio web con Modo Emacs Org]]
- [[https://www.youtube.com/watch?v=AfkrzFodoNw][Vídeo Youtube Build Your Website with Org Mode]]
* Footnotes

[fn:1] 
